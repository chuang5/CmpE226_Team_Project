[33m[nodemon] 2.0.1[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching dir(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node server.js`[39m
Server is running on port: 5000
Database is connected ...
login: req { username: '002', password: '002' }
error occurred { Error: ER_BAD_FIELD_ERROR: Unknown column 'username' in 'where clause'
    at Query.Sequence._packetToError (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\protocol\Protocol.js:291:23)
    at Parser._parsePacket (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\protocol\Parser.js:433:10)
    at Parser.write (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\protocol\Parser.js:43:10)
    at Protocol.write (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\Connection.js:525:10)
    at Socket.emit (events.js:189:13)
    at addChunk (_stream_readable.js:284:12)
    --------------------
    at Protocol._enqueue (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at Connection.query (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\mysql\lib\Connection.js:201:25)
    at exports.login (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\routes\loginRoutes.js:17:16)
    at Layer.handle [as handle_request] (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\express\lib\router\layer.js:95:5)
    at C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\express\lib\router\index.js:335:12)
    at next (C:\Users\kles9\Desktop\CmpE226\CmpE226_Team_Project\Server_Banking\node_modules\express\lib\router\index.js:275:10)
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'username\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT * FROM customers WHERE username = \'002\'' }
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node server.js`[39m
Server is running on port: 5000
Database is connected ...
login: req { username: '002', password: '002' }
getCustomersList: req { employee_id: '2' }
addCustomer: req { username: '',
  name: 'appl',
  ssn: '01004789',
  phone: '8008008000',
  address: '411 4th street',
  password: '',
  employee_id: 2 }
new customer ID: 23
customer added
deleteCustomer: req { customer_id: '23' }
The solution is:  OkPacket {
  fieldCount: 0,
  affectedRows: 1,
  insertId: 0,
  serverStatus: 2,
  warningCount: 0,
  message: '',
  protocol41: true,
  changedRows: 0 }
The solution is:  OkPacket {
  fieldCount: 0,
  affectedRows: 0,
  insertId: 0,
  serverStatus: 2,
  warningCount: 0,
  message: '',
  protocol41: true,
  changedRows: 0 }
The solution is:  OkPacket {
  fieldCount: 0,
  affectedRows: 0,
  insertId: 0,
  serverStatus: 34,
  warningCount: 0,
  message: '',
  protocol41: true,
  changedRows: 0 }
The solution is:  OkPacket {
  fieldCount: 0,
  affectedRows: 0,
  insertId: 0,
  serverStatus: 34,
  warningCount: 0,
  message: '',
  protocol41: true,
  changedRows: 0 }
The solution is:  OkPacket {
  fieldCount: 0,
  affectedRows: 0,
  insertId: 0,
  serverStatus: 34,
  warningCount: 0,
  message: '',
  protocol41: true,
  changedRows: 0 }
addChecking: req { customer_id: '20', balance: 510 }
user_accounts added
frieness: req { sender: '5645054488460159',
  receiver: '4885963868459056',
  amount: 150 }
frieness: req { sender: '5645054488460159',
  receiver: '4885963868459056',
  amount: 150 }
frieness: req { sender: '5645054488460159',
  receiver: '4885963868459056',
  amount: 150 }
getCustomersList: req { employee_id: '2' }
getCustomersList: req { employee_id: '2' }
getCustomersList: req { employee_id: '2' }
login: req { username: 'adminE', password: 'adminE' }
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomerInfo: req IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     paused: false,
     emitClose: true,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 457,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2220140,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 473,
        [Symbol(triggerId)]: 459 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 457,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2220140,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 473,
        [Symbol(triggerId)]: 459 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: 'localhost:5000',
     connection: 'keep-alive',
     'content-length': '20',
     accept: 'application/json, text/plain, */*',
     origin: 'http://localhost:3000',
     'user-agent':
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
     'content-type': 'application/json;charset=UTF-8',
     'sec-fetch-site': 'same-site',
     'sec-fetch-mode': 'cors',
     referer: 'http://localhost:3000/customerDetail/11',
     'accept-encoding': 'gzip, deflate, br',
     'accept-language': 'zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7' },
  rawHeaders:
   [ 'Host',
     'localhost:5000',
     'Connection',
     'keep-alive',
     'Content-Length',
     '20',
     'Accept',
     'application/json, text/plain, */*',
     'Origin',
     'http://localhost:3000',
     'User-Agent',
     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
     'Content-Type',
     'application/json;charset=UTF-8',
     'Sec-Fetch-Site',
     'same-site',
     'Sec-Fetch-Mode',
     'cors',
     'Referer',
     'http://localhost:3000/customerDetail/11',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Accept-Language',
     'zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7' ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/getCustomerInfo',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 457,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2220140,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 473,
        [Symbol(triggerId)]: 459 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/getCustomerInfo',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/getCustomerInfo',
     path: '/getCustomerInfo',
     href: '/getCustomerInfo',
     _raw: '/getCustomerInfo' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      [Object: null prototype] { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 457,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 2220140,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 473,
           [Symbol(triggerId)]: 459 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 457,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 2220140,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 473,
           [Symbol(triggerId)]: 459 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: [Object: null prototype] {},
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        'x-powered-by': [Array],
        'access-control-allow-origin': [Array],
        'access-control-allow-credentials': [Array],
        'access-control-allow-methods': [Array],
        'access-control-allow-headers': [Array],
        'cache-control': [Array] } },
  body: { customer_id: '11' },
  _body: true,
  length: undefined,
  route:
   Route {
     path: '/getCustomerInfo',
     stack: [ [Layer] ],
     methods: { post: true } } }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket { customer_id: 11, agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    s_id: 2,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    category: 'withdraw',
    amount: 1000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 17600 },
  RowDataPacket {
    s_id: 4,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    category: 'withdraw',
    amount: 100,
    date: 2019-11-25T08:00:00.000Z,
    balance: 17500 },
  RowDataPacket {
    s_id: 6,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '8263804514133060',
    category: 'withdraw',
    amount: 10000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 7500 },
  RowDataPacket {
    s_id: 7,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '8263804514133060',
    category: 'deposite',
    amount: 5000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 12500 },
  RowDataPacket {
    s_id: 10,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '4204889850164311',
    category: 'payment',
    amount: 200,
    date: 2019-11-26T08:00:00.000Z,
    balance: 12300 },
  RowDataPacket {
    s_id: 12,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '8263804514133060',
    category: 'deposite',
    amount: 125,
    date: 2019-11-28T08:00:00.000Z,
    balance: 12425 } ]
The solution is:  [ RowDataPacket {
    s_id: 1,
    user: 11,
    user_account: '8263804514133060',
    partner_account: '5645054488460159',
    category: 'deposite',
    amount: 10000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 12000 },
  RowDataPacket {
    s_id: 2,
    user: 11,
    user_account: '8263804514133060',
    partner_account: '5645054488460159',
    category: 'withdraw',
    amount: 5000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 7000 },
  RowDataPacket {
    s_id: 3,
    user: 11,
    user_account: '8263804514133060',
    partner_account: '5645054488460159',
    category: 'withdraw',
    amount: 125,
    date: 2019-11-28T08:00:00.000Z,
    balance: 6875 } ]
The solution is:  [ RowDataPacket {
    s_id: 1,
    user: 11,
    user_account: '4204889850164311',
    partner_account: '5645054488460159',
    category: 'payment',
    amount: 200,
    date: 2019-11-26T08:00:00.000Z,
    balance: -200 },
  RowDataPacket {
    s_id: 3,
    user: 11,
    user_account: '4204889850164311',
    partner_account: '1196171814607991',
    category: 'purchase',
    amount: 200,
    date: 2019-11-26T08:00:00.000Z,
    balance: 0 } ]
The solution is:  [ RowDataPacket {
    f_id: 1,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 100,
    description: 'Test for free money' },
  RowDataPacket {
    f_id: 2,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 100,
    description: 'Test for free money' },
  RowDataPacket {
    f_id: 3,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 100,
    description: 'Test for free money' },
  RowDataPacket {
    f_id: 4,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 1000,
    description: 'DOn\'t take my money again. I will give you more' },
  RowDataPacket {
    f_id: 5,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 1000,
    description: 'How dare you!' },
  RowDataPacket {
    f_id: 6,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 100,
    description: 'Put' } ]
The solution is:  [ RowDataPacket { account_num: '5645054488460159', customer: 11, balance: 12425 } ]
The solution is:  [ RowDataPacket { account_num: '8263804514133060', customer: 11, balance: 6875 } ]
The solution is:  [ RowDataPacket {
    card_num: '4204889850164311',
    customer: 11,
    due_date: '11/25/2019',
    state_balance: 0,
    balance: 0,
    exp: '11/2024' } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomerInfo: req IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     paused: false,
     emitClose: true,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 554,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2271290,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 570,
        [Symbol(triggerId)]: 556 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 554,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2271290,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 570,
        [Symbol(triggerId)]: 556 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: 'localhost:5000',
     connection: 'keep-alive',
     'content-length': '20',
     accept: 'application/json, text/plain, */*',
     origin: 'http://localhost:3000',
     'user-agent':
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
     'content-type': 'application/json;charset=UTF-8',
     'sec-fetch-site': 'same-site',
     'sec-fetch-mode': 'cors',
     referer: 'http://localhost:3000/customerDetail/11',
     'accept-encoding': 'gzip, deflate, br',
     'accept-language': 'zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7' },
  rawHeaders:
   [ 'Host',
     'localhost:5000',
     'Connection',
     'keep-alive',
     'Content-Length',
     '20',
     'Accept',
     'application/json, text/plain, */*',
     'Origin',
     'http://localhost:3000',
     'User-Agent',
     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
     'Content-Type',
     'application/json;charset=UTF-8',
     'Sec-Fetch-Site',
     'same-site',
     'Sec-Fetch-Mode',
     'cors',
     'Referer',
     'http://localhost:3000/customerDetail/11',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Accept-Language',
     'zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7' ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/getCustomerInfo',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 554,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2271290,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 570,
        [Symbol(triggerId)]: 556 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/getCustomerInfo',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/getCustomerInfo',
     path: '/getCustomerInfo',
     href: '/getCustomerInfo',
     _raw: '/getCustomerInfo' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      [Object: null prototype] { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 554,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 2271290,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 570,
           [Symbol(triggerId)]: 556 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 554,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 2271290,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 570,
           [Symbol(triggerId)]: 556 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: [Object: null prototype] {},
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        'x-powered-by': [Array],
        'access-control-allow-origin': [Array],
        'access-control-allow-credentials': [Array],
        'access-control-allow-methods': [Array],
        'access-control-allow-headers': [Array],
        'cache-control': [Array] } },
  body: { customer_id: '11' },
  _body: true,
  length: undefined,
  route:
   Route {
     path: '/getCustomerInfo',
     stack: [ [Layer] ],
     methods: { post: true } } }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket { customer_id: 11, agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    s_id: 2,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    category: 'withdraw',
    amount: 1000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 17600 },
  RowDataPacket {
    s_id: 4,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    category: 'withdraw',
    amount: 100,
    date: 2019-11-25T08:00:00.000Z,
    balance: 17500 },
  RowDataPacket {
    s_id: 6,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '8263804514133060',
    category: 'withdraw',
    amount: 10000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 7500 },
  RowDataPacket {
    s_id: 7,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '8263804514133060',
    category: 'deposite',
    amount: 5000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 12500 },
  RowDataPacket {
    s_id: 10,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '4204889850164311',
    category: 'payment',
    amount: 200,
    date: 2019-11-26T08:00:00.000Z,
    balance: 12300 },
  RowDataPacket {
    s_id: 12,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '8263804514133060',
    category: 'deposite',
    amount: 125,
    date: 2019-11-28T08:00:00.000Z,
    balance: 12425 } ]
The solution is:  [ RowDataPacket {
    s_id: 1,
    user: 11,
    user_account: '8263804514133060',
    partner_account: '5645054488460159',
    category: 'deposite',
    amount: 10000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 12000 },
  RowDataPacket {
    s_id: 2,
    user: 11,
    user_account: '8263804514133060',
    partner_account: '5645054488460159',
    category: 'withdraw',
    amount: 5000,
    date: 2019-11-25T08:00:00.000Z,
    balance: 7000 },
  RowDataPacket {
    s_id: 3,
    user: 11,
    user_account: '8263804514133060',
    partner_account: '5645054488460159',
    category: 'withdraw',
    amount: 125,
    date: 2019-11-28T08:00:00.000Z,
    balance: 6875 } ]
The solution is:  [ RowDataPacket {
    s_id: 1,
    user: 11,
    user_account: '4204889850164311',
    partner_account: '5645054488460159',
    category: 'payment',
    amount: 200,
    date: 2019-11-26T08:00:00.000Z,
    balance: -200 },
  RowDataPacket {
    s_id: 3,
    user: 11,
    user_account: '4204889850164311',
    partner_account: '1196171814607991',
    category: 'purchase',
    amount: 200,
    date: 2019-11-26T08:00:00.000Z,
    balance: 0 } ]
The solution is:  [ RowDataPacket {
    f_id: 1,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 100,
    description: 'Test for free money' },
  RowDataPacket {
    f_id: 2,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 100,
    description: 'Test for free money' },
  RowDataPacket {
    f_id: 3,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 100,
    description: 'Test for free money' },
  RowDataPacket {
    f_id: 4,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 1000,
    description: 'DOn\'t take my money again. I will give you more' },
  RowDataPacket {
    f_id: 5,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 1000,
    description: 'How dare you!' },
  RowDataPacket {
    f_id: 6,
    user: 11,
    user_account: '5645054488460159',
    partner_account: '1196171814607991',
    date: 2019-11-25T08:00:00.000Z,
    amount: 100,
    description: 'Put' } ]
The solution is:  [ RowDataPacket { account_num: '5645054488460159', customer: 11, balance: 12425 } ]
The solution is:  [ RowDataPacket { account_num: '8263804514133060', customer: 11, balance: 6875 } ]
The solution is:  [ RowDataPacket {
    card_num: '4204889850164311',
    customer: 11,
    due_date: '11/25/2019',
    state_balance: 0,
    balance: 0,
    exp: '11/2024' } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomerInfo: req IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     paused: false,
     emitClose: true,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 605,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2281640,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 653,
        [Symbol(triggerId)]: 607 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 605,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2281640,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 653,
        [Symbol(triggerId)]: 607 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: 'localhost:5000',
     connection: 'keep-alive',
     'content-length': '20',
     accept: 'application/json, text/plain, */*',
     origin: 'http://localhost:3000',
     'user-agent':
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
     'content-type': 'application/json;charset=UTF-8',
     'sec-fetch-site': 'same-site',
     'sec-fetch-mode': 'cors',
     referer: 'http://localhost:3000/customerDetail/20',
     'accept-encoding': 'gzip, deflate, br',
     'accept-language': 'zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7' },
  rawHeaders:
   [ 'Host',
     'localhost:5000',
     'Connection',
     'keep-alive',
     'Content-Length',
     '20',
     'Accept',
     'application/json, text/plain, */*',
     'Origin',
     'http://localhost:3000',
     'User-Agent',
     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
     'Content-Type',
     'application/json;charset=UTF-8',
     'Sec-Fetch-Site',
     'same-site',
     'Sec-Fetch-Mode',
     'cors',
     'Referer',
     'http://localhost:3000/customerDetail/20',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Accept-Language',
     'zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7' ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/getCustomerInfo',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 14 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 605,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2281640,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 653,
        [Symbol(triggerId)]: 607 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/getCustomerInfo',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/getCustomerInfo',
     path: '/getCustomerInfo',
     href: '/getCustomerInfo',
     _raw: '/getCustomerInfo' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      [Object: null prototype] { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 605,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 2281640,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 653,
           [Symbol(triggerId)]: 607 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 605,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 2281640,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 653,
           [Symbol(triggerId)]: 607 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: [Object: null prototype] {},
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        'x-powered-by': [Array],
        'access-control-allow-origin': [Array],
        'access-control-allow-credentials': [Array],
        'access-control-allow-methods': [Array],
        'access-control-allow-headers': [Array],
        'cache-control': [Array] } },
  body: { customer_id: '20' },
  _body: true,
  length: undefined,
  route:
   Route {
     path: '/getCustomerInfo',
     stack: [ [Layer] ],
     methods: { post: true } } }
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket { customer_id: 20, agent_id: 1 } ]
The solution is:  []
The solution is:  []
The solution is:  []
The solution is:  []
The solution is:  [ RowDataPacket { account_num: '4885963868459056', customer: 20, balance: 510 } ]
The solution is:  []
The solution is:  []
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
getCustomersList: req { employee_id: '1' }
The solution is:  [ RowDataPacket {
    customer_id: 11,
    name: '001',
    ssn: '12345678',
    phone: '1234567890',
    address: '123 street',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 20,
    name: 'brian',
    ssn: '83243639',
    phone: '8016523318',
    address: '873 7th Pl.',
    agent_id: 1 } ]
The solution is:  [ RowDataPacket {
    customer_id: 21,
    name: 'joe',
    ssn: '23243639',
    phone: '8116523318',
    address: '87 5th Pl.',
    agent_id: 1 } ]
frieness: req { sender: '5645054488460159',
  receiver: '4885963868459056',
  amount: 150,
  description: 'testestest' }
